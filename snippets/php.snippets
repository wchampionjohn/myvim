snippet php
	<?php
	${1}
	?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet **
	/**
	 * ${1}
	 **/
snippet **f
	/**
	 *
	 * ${1}
	 *
	 * @access ${2}
	 * @param ${3}
	 * @return ${4}
	 **/
snippet **j
	/**
	 *
	 * ${1}
	 *
	 * @verb ${2}
	 *
	 * @request
	 * ${3}
	 *
	 * @response
	 * ${4}
	 *
	 **/
snippet **a
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @param ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @param ${4:string}
	 **/
	${1:param} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/

	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
# Based on nebjak/snipmate.vim/snippets/php.snippets

# Controller
snippet ci_controller
	<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

	class ${1:ClassName} extends CI_Controller
	{
		function __construct()
		{
			parent::__construct();
			${2:// code...}
		}

		function ${3:index}()
		{
			${4:// code...}
		}
	}
# Model
snippet ci_model
	<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

	class ${1:ClassName_model} extends CI_Model
	{
		function __construct()
		{
			parent::__construct();
			${2:// code...}
		}
	}
snippet ci_model_crudl
	<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

	class ${1:ClassName_model} extends CI_Model
	{
		private $table = '${2:table_name}';

		function __construct()
		{
			parent::__construct();
			${3:// code...}
		}

		// public create(data) {{{
		/**
		 * create
		 *
		 * @param mixed $data
		 * @access public
		 * @return boolean
		 */
		public function create($data)
		{
			if($this->db->insert($table, $data))
				return true;
			else
				return false;
		}
		// }}}

		// public read(id) {{{
		/**
		 * read
		 *
		 * @param int $id
		 * @access public
		 * @return boolean
		 */
		public function read($id)
		{
			return $this->db->get_where($table, array('id', $id))->result();
		}
		// }}}

		// public update(id,data) {{{
		/**
		 * update
		 *
		 * @param int $id
		 * @param mixed $data
		 * @access public
		 * @return boolean
		 */
		public function update($id, $data)
		{
			if($this->db->update($table, $data, array('id' => $id)))
				return true;
			else
				return false;
		}
		// }}}

		// public delete(id) {{{
		/**
		 * delete
		 *
		 * @param mixed $id (int o array of int)
		 * @access public
		 * @return boolean
		 */
		public function delete($id)
		{
			if(is_array($id))
			{
				$this->db->trans_start();
				foreach($id as $elem)
					$this->db->delete($table, array('id' => $elem));
				$this->db->trans_complete();
			}
			else
			{
				if($this->db->delete($table, array('id' => $id)))
					return true;
				else
					return false;
			}
		}
		// }}}

		// public listRows(limit=null,offset=0) {{{
		/**
		 * listRows
		 *
		 * @param int $limit
		 * @param int $offset
		 * @access public
		 * @return boolean
		 */
		public function listRows($limit = null, $offset = 0)
		{
			if(!is_null($limit))
				$this->db->limit($limit, $offset);
			return $this->db->get($table)->result();
		}
		// }}}
	}
# Load view
snippet ci_load-view
	$this->load->view("${1:view_name}", $${2:data});${3}
# DB Class snippets
snippet ci_db-insert
	$this->db->insert("${1:table}", $${2:data});${3}
snippet ci_db-select
	$this->db->select("${1:id, ...}");${2}
snippet ci_db-from
	$this->db->from("${1:table}");${2}
snippet ci_db-join
	$this->db->join("${1:table}", "${2:condition}", "${3:type}");${4}
snippet ci_db-where
	$this->db->where("${1:key}", "${2:value}");${3}
snippet ci_db-or_where
	$this->db->or_where("${1:key}", "${2:value}");${3}
snippet ci_db-get
	$this->db->get("${1:table}", ${2:limit}, ${3:offset});${4}
snippet ci_db-delete
	$this->db->delete("${1:table}", "${2:where}");${3}
snippet ci_db-update
	$this->db->update("${1:table}", $${2:set}, $${3:where});${4}
# Input Class snippets
snippet ci_input-post
	$this->input->post("${1:index}");${2}
snippet ci_input-get
	$this->input->get("${1:index}");${2}
snippet ci_input-cookie
	$this->input->cookie("${1:index}");${2}
snippet ci_input-server
	$this->input->server("${1:index}");${2}
snippet ci_input-user_agent
	$this->input->user_agent();${1}
snippet ci_input-is_ajax_request
	$this->input->is_ajax_request();${1}
snippet ci_input-is_cli_request
	$this->input->is_cli_request();${1}
# Form Validation Class and Form Helper snippets
snippet ci_form_validation-set_rules
	$this->form_validation->set_rules("${1:field}", "${2:label}", "${3:trim|required}");${4}
snippet ci_form_open
	form_open("${1:action}");${2}
snippet ci_form_open_multipart
	form_open_multipart("${1:action}");${2}
snippet ci_form_hidden
	form_hidden("${1:name}", "${2:value}");${3}
snippet ci_form_input
	form_input("${1:name}", "${2:value}");${3}
snippet ci_form_password
	form_password("${1:name}", "${2:value}");${3}
snippet ci_form_upload
	form_upload("${1:name}", "${2:value}");${3}
snippet ci_form_textarea
	form_textarea("${1:name}", "${2:value}");${3}
snippet ci_form_dropdown
	form_dropdown("${1:name}", $${2:options}, $${3:selected);${4}
snippet ci_form_checkbox
	form_checkbox("${1:name}", "${2:value}");${3}
snippet ci_form_radio
	form_radio("${1:name}", "${2:value}");${3}
snippet ci_form_submit
	form_submit("${1:name}", "${2:value}");${3}
snippet ci_form_reset
	form_reset("${1:name}", "${2:value}");${3}
snippet ci_form_button
	form_button("${1:name}", "${2:value}");${3}
snippet ci_form_label
	form_label("${1:label text}", "${2:id}");${3}
snippet ci_form_close
	form_close();${1}
snippet ci_validation_errors
	validation_errors();${1}
# Session Class snippets
snippet ci_session_userdata
	$this->session->userdata("${1:item}");${2}
snippet ci_session_set_userdata
	$this->session->set_userdata($${1:array});${2}
snippet ci_session_flashdata
	$this->session->flashdata("${1:item}");${2}
snippet ci_session_set_flashdata
	$this->session->set_flashdata("${1:item}", "${2:value}");${3}
